{"abi":[{"type":"function","name":"collect","inputs":[],"outputs":[{"name":"","type":"bytes","internalType":"bytes"}],"stateMutability":"view"},{"type":"function","name":"shouldRespond","inputs":[{"name":"data","type":"bytes[]","internalType":"bytes[]"}],"outputs":[{"name":"","type":"bool","internalType":"bool"},{"name":"","type":"bytes","internalType":"bytes"}],"stateMutability":"pure"}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"collect()":"e5225381","shouldRespond(bytes[])":"44e6e4ce"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"collect\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"shouldRespond\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"HOW TO USE 1) Edit the WATCHED_ADDRESSES list below to the addresses you want to monitor. 2) Optionally tweak thresholds (MIN_DROP_WEI, MIN_DROP_BPS, MIN_BLOCKS_WINDOW). 3) Deploy. The Drosera operator will periodically call collect() and feed the    returned snapshots into shouldRespond(data) to decide whether to trigger. Signal logic - If ANY watched address experiences a balance drop greater than MIN_DROP_WEI   AND a relative drop >= MIN_DROP_BPS (basis points) between the most recent   two snapshots (separated by at least MIN_BLOCKS_WINDOW blocks), the trap   returns true with an encoded payload describing the offender and amounts.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/GasDrainTrap.sol\":\"IDroseraTrap\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"src/GasDrainTrap.sol\":{\"keccak256\":\"0xe2343da665090ca99f5fce26d4befc18d7d73f11f50e8c5eaf4f216a152277eb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9c93ca697da20c59ec2a24fca77369d2f2ef91b816eed4b6619fe2eb1d2c6e4e\",\"dweb:/ipfs/QmZbA1fxPFd9FiAGktUkdnv6GKc5j5bdg6pG28FtZfQfrM\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.30+commit.73712a01"},"language":"Solidity","output":{"abi":[{"inputs":[],"stateMutability":"view","type":"function","name":"collect","outputs":[{"internalType":"bytes","name":"","type":"bytes"}]},{"inputs":[{"internalType":"bytes[]","name":"data","type":"bytes[]"}],"stateMutability":"pure","type":"function","name":"shouldRespond","outputs":[{"internalType":"bool","name":"","type":"bool"},{"internalType":"bytes","name":"","type":"bytes"}]}],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"remappings":["forge-std/=lib/forge-std/src/"],"optimizer":{"enabled":false,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"src/GasDrainTrap.sol":"IDroseraTrap"},"evmVersion":"prague","libraries":{}},"sources":{"src/GasDrainTrap.sol":{"keccak256":"0xe2343da665090ca99f5fce26d4befc18d7d73f11f50e8c5eaf4f216a152277eb","urls":["bzz-raw://9c93ca697da20c59ec2a24fca77369d2f2ef91b816eed4b6619fe2eb1d2c6e4e","dweb:/ipfs/QmZbA1fxPFd9FiAGktUkdnv6GKc5j5bdg6pG28FtZfQfrM"],"license":"MIT"}},"version":1},"id":19}